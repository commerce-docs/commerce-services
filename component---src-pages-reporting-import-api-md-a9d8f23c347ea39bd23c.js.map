{"version":3,"file":"component---src-pages-reporting-import-api-md-a9d8f23c347ea39bd23c.js","mappings":"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","sources":["webpack://commerce-services/./src/pages/reporting/import-api.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/commerce-services/commerce-services/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"import-api\"\n    }}>{`Import API`}</h1>\n    <p>{`The Adobe Commerce Reporting Import API allows you to push arbitrary data into your data warehouse using REST.`}</p>\n    <p>{`Before using the import API, make sure you `}<a parentName=\"p\" {...{\n        \"href\": \"../reporting/index.md#authentication\"\n      }}>{`authenticate`}</a>{` your connection.`}</p>\n    <h2 {...{\n      \"id\": \"return-codes\"\n    }}>{`Return Codes`}</h2>\n    <p>{`The Data Import API uses standard HTTP return codes to indicate the status of a request. Your application should handle each of the following return statuses.`}</p>\n    <p>{`Codes in the 2xx range indicate a successful transaction, codes in the 4xx range indicate a bad request, and codes in the 5xx range indicate an error with Adobe Commerce Reporting. If errors in the 5xx range persist, please contact `}<a parentName=\"p\" {...{\n        \"href\": \"https://experienceleague.adobe.com/docs/commerce-knowledge-base/kb/help-center-guide/magento-help-center-user-guide.html\"\n      }}>{`support`}</a>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`200 OK - request was successful.`}</li>\n      <li parentName=\"ul\">{`201 Created - new data was added as a result of the request.`}</li>\n      <li parentName=\"ul\">{`400 Bad request - Your request was missing a required parameter.`}</li>\n      <li parentName=\"ul\">{`401 Unauthorized - Authorization failed. Double check your API key.`}</li>\n      <li parentName=\"ul\">{`404 Not Found - The resource you are looking for does not exist.`}</li>\n      <li parentName=\"ul\">{`500 Server Error - There is an error in Adobe Commerce Reporting.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"versioning\"\n    }}>{`Versioning`}</h2>\n    <p>{`The current version of the Import API is v2.`}</p>\n    <p>{`v1 is still available, but will be deprecated in the future.`}</p>\n    <h2 {...{\n      \"id\": \"test-environment\"\n    }}>{`Test environment`}</h2>\n    <p>{`The Data Import API has a full test (sandbox) environment.`}</p>\n    <p>{`The sandbox environment uses the same keys and return codes as the production API, but does not persist incoming data. You can use this environment to test your integration.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`curl -v https://sandbox-connect.rjmetrics.com/v2/client/:cid/:endpoint?apikey=:apikey\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"methods\"\n    }}>{`Methods`}</h2>\n    <h3 {...{\n      \"id\": \"status\"\n    }}>{`Status`}</h3>\n    <p>{`You can always check the status of the Data Import API. This is called when you instantiate the client. This will return a `}<inlineCode parentName=\"p\">{`200-Success`}</inlineCode>{` response if the API is operational.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`curl -v https://connect.rjmetrics.com\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"upsert\"\n    }}>{`Upsert`}</h3>\n    <p>{`The upsert method allows you to push data into your RJMetrics data warehouse. You can push entire arrays of data or single data points. This endpoint will only accept data that have the following properties:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The data must be valid JSON.`}</li>\n      <li parentName=\"ul\">{`Each data point must contain a `}<inlineCode parentName=\"li\">{`keys`}</inlineCode>{` field. The `}<inlineCode parentName=\"li\">{`keys`}</inlineCode>{` field should specify which fields in the records represent the primary key(s).`}</li>\n      <li parentName=\"ul\">{`An array of data must contain no more than 100 individual data points.`}</li>\n    </ul>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Each data point in your data warehouse will be uniquely indexed by the fields specified in `}<inlineCode parentName=\"p\">{`keys`}</inlineCode>{`. If a new data point has keys that conflict with a pre-existing data point, the old data point will be replaced.`}</p>\n    <p>{`Tables in the Data Import API are schemaless. There is no command to create or destroy a table - you can push data to any table name and it will be dynamically generated.`}</p>\n    <p>{`Here are some guidelines for managing tables:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Create one table for each type of data point you are pushing.`}</li>\n      <li parentName=\"ul\">{`Generally speaking, each data point pushed into a table should have the same schema.`}</li>\n      <li parentName=\"ul\">{`Typically, one type of 'thing' will correspond to one table. For example, a typical eCommerce company might have a 'customer', 'order', 'order_item', and 'product' table.`}</li>\n      <li parentName=\"ul\">{`Table names must be alphanumeric (plus underscores). Bad table names will result in a `}<inlineCode parentName=\"li\">{`400 Bad Request`}</inlineCode>{` return code.`}</li>\n    </ul>\n    <p>{`Here's an example of an Upsert call:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`curl -X POST -d @filename https://connect.rjmetrics.com/v2/client/:cid/table/:table/data?apikey=:apikey --header \"Content-type: application/json\"\n`}</code></pre>\n    <p>{`The above call contains the following variables:`}</p>\n    <p><inlineCode parentName=\"p\">{`@filename`}</inlineCode>{` - name of the file you are uploading\n`}<inlineCode parentName=\"p\">{`:cid`}</inlineCode>{` - your client Id\n`}<inlineCode parentName=\"p\">{`:table`}</inlineCode>{` - table name\n`}<inlineCode parentName=\"p\">{`:apikey`}</inlineCode>{` - your API key`}</p>\n    <p><strong parentName=\"p\">{`Response:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"status\": \"complete\",\n\"created_at\": \"2019-08-05 04:51:02\"\nclient.push_data(\n    \"table_name\",\n    test_data\n)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"upsert-single-data-point-example\"\n    }}>{`Upsert single data point example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"keys\": [\"id\"],\n  \"id\": 1,\n  \"email\": \"joe@schmo.com\",\n  \"status\": \"pending\",\n  \"created_at\": \"2019-08-01 14:22:32\"\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"upsert-array-of-data-points-example\"\n    }}>{`Upsert array of data points example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`[{\n  \"keys\": [\"id\"],\n  \"id\": 1,\n  \"email\": \"joe@schmo.com\",\n  \"status\": \"pending\",\n  \"created_at\": \"2019-08-01 14:22:32\"\n},{\n  \"keys\": [\"id\"],\n  \"id\": 2,\n  \"email\": \"anne@schmo.com\",\n  \"status\": \"pending\",\n  \"created_at\": \"2019-08-03 23:12:30\"\n},{\n  \"keys\": [\"id\"],\n  \"id\": 1,\n  \"email\": \"joe@schmo.com\",\n  \"status\": \"complete\",\n  \"created_at\": \"2019-08-05 04:51:02\"\n}]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"additional-examples\"\n    }}>{`Additional Examples`}</h2>\n    <p>{`The following section describes how you can call the import API through various libraries to perform the following tasks:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Create a Users Table`}</li>\n      <li parentName=\"ul\">{`Create an Orders Table`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"create-a-users-table\"\n    }}>{`Create a users table`}</h3>\n    <p>{`Your most important table in Adobe Commerce Reporting is your `}<inlineCode parentName=\"p\">{`Users`}</inlineCode>{` table. In your application, you probably have a `}<inlineCode parentName=\"p\">{`user`}</inlineCode>{` object with some data like `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`email`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`acquisition_source`}</inlineCode>{`.`}</p>\n    <p>{`This examples describes how to push this data to the Import API.`}</p>\n    <p>{`First, define a template to push the data. Ensure the client is `}<inlineCode parentName=\"p\">{`authenticated <api-authentication>`}</inlineCode>{` and prepare to push the data to the Import API.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"5\" languages=\"JS, PHP, Clojure, Ruby, Python\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript\"\n    }}>{`Javascript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`var rjmetrics = require(\"rjmetrics\");\nclient = new rjmetrics.Client(your-client-id, \"your-api-key\");\n\n// make sure the client is authenticated before we do anything\nclient.authenticate().then( function(data) {\n  // this is where we'll push the data\n}).fail(function(err) {\n  console.error(\"Failed to authenticate!\");\n});\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"php\"\n    }}>{`PHP`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`require 'vendor/autoload.php';\n$client = new RJMetrics\\\\Client($your-client-id, \"your-api-key\");\n\n// make sure the client is authenticated before we do anything\nif($client->authenticate()) {\n  // this is where we'll push the data\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"clojure\"\n    }}>{`Clojure`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-clojure\"\n      }}>{`(ns examples.acquisition-source\n  (:require [rjmetrics.core :as rjmetrics]))\n\n(defn run\n  []\n  (let [config {:client-id your-client-id :api-key \"your-api-key\"}]\n    (when (rjmetrics/authenticated? config)\n      ;; this is where we'll push data\n    )\n  )\n)\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"ruby\"\n    }}>{`Ruby`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`require \"rjmetrics_client\"\nclient = RJMetricsClient.new(your-client-id, \"your-api-key\")\n\n# make sure the client is authenticated before we do anything\nif client.authenticated?\n  # this is where we'll push data\nend\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"python\"\n    }}>{`Python`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import rjmetrics.client\nclient = rjmetrics.client.Client(your_client_id, \"your_api_key\")\n\n# make sure the client is authenticated before we do anything\nif client.authenticate()\n # this is where we'll push data\n`}</code></pre>\n    <p>{`Next, create a new function to sync the new data.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"5\" languages=\"JS, PHP, Clojure, Ruby, Python\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript-1\"\n    }}>{`Javascript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function syncUser(client, user) {\n  return client.pushData(\n    // table named \"users\"\n    \"users\",\n    {\n      // user_id is the unique key here, since each user should only\n      // have one record in this table\n      \"keys\": [\"id\"],\n      \"id\": user.id,\n      \"email\": user.email,\n      \"acquisition_source\": user.acquisition_source\n    });\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"php-1\"\n    }}>{`PHP`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`function syncUser($client, $user) {\n  $dataToPush = new stdClass();\n  $dataToPush->id = $user->id;\n  $dataToPush->email = $user->email;\n  $dataToPush->acquisition_source = $user->acquisitionSource;\n  // user_id is the unique key here, since each user should only\n  // have one record in this table\n  $dataToPush->keys = array(\"id\");\n\n  // table named \"users\"\n  return $client->pushData(\"users\", $dataToPush);\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"clojure-1\"\n    }}>{`Clojure`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-clojure\"\n      }}>{`(defn- sync-user\n  [config user]\n  (let [result (rjmetrics/push-data config\n                                    ;; table named \"users\"\n                                    \"users\"\n                                    ;; user_id is the unique key here, since each user\n                                    ;; should only have one record in the table\n                                    (assoc user :keys [\"id\"]))]\n    (if (= (-> result first :status) 201)\n        (print \"Synced user with id\" (:id user) \"\\\\n\")\n        (print \"Failed to sync user with id\" (:id user) \"\\\\n\"))))\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"ruby-1\"\n    }}>{`Ruby`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`def sync_user(client, user)\n  # \\`id\\` is the unique key here, since each user should only\n  # have one record in this table\n  user[:keys] = [:id]\n  # table named \"users\"\n  return client.pushData(\"users\", user)\nend\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"python-1\"\n    }}>{`Python`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def sync_user(client, user):\n  # \\`id\\` is the unique key here, since each user should only\n  # have one record in this table\n  user[\"keys\"] = [\"id\"]\n  # table named \"users\"\n  return client.push_data(\"users\", [user]) # NOTE: the python library only pushes lists\n`}</code></pre>\n    <p>{`Finally, incorporate the `}<inlineCode parentName=\"p\">{`syncUser`}</inlineCode>{` function into the original script.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"5\" languages=\"JS, PHP, Clojure, Ruby, Python\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript-2\"\n    }}>{`Javascript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`var rjmetrics = require(\"rjmetrics\");\nvar client = new rjmetrics.Client(your-client-id, \"your-api-key\");\n\nfunction syncUser(client, user) {\n  return client.pushData(\n    // table named \"users\"\n    \"users\",\n    {\n      // user_id is the unique key here, since each user should only\n      // have one record in this table\n      \"keys\": [\"id\"],\n      \"id\": user.id,\n      \"email\": user.email,\n      \"acquisition_source\": user.acquisition_source\n    });\n}\n\n// let's define some fake users\nvar users = [\n  {id: 1, email: \"joe@schmo.com\", acquisition_source: \"PPC\"},\n  {id: 2, email: \"mike@smith.com\", acquisition_source: \"PPC\"},\n  {id: 3, email: \"lorem@ipsum.com\", acquisition_source: \"Referral\"},\n  {id: 4, email: \"george@vandelay.com\", acquisition_source: \"Organic\"},\n  {id: 5, email: \"larry@google.com\", acquisition_source: \"Organic\"},\n];\n\n// make sure the client is authenticated before we do anything\nclient.authenticate().then( function(data) {\n\n  // iterate through users and push data\n  users.forEach( function(user) {\n    syncUser(client, user).then( function(data) {\n      console.log(\"Synced user with id \" + user.id);\n    }, function(error) {\n      console.error(\"Failed to sync user with id \" + user.id);\n    })\n  });\n\n}).fail(function(err) {\n  console.error(\"Failed to authenticate!\");\n});\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"php-2\"\n    }}>{`PHP`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`require 'vendor/autoload.php';\n$client = new RJMetrics\\\\Client($your-client-id, \"your-api-key\");\n\nfunction syncUser($client, $user) {\n  $dataToPush = new stdClass();\n  $dataToPush->id = $user->id;\n  $dataToPush->email = $user->email;\n  $dataToPush->acquisition_source = $user->acquisitionSource;\n  // user_id is the unique key here, since each user should only\n  // have one record in this table\n  $dataToPush->keys = array(\"id\");\n\n  // table named \"users\"\n  return $client->pushData(\"users\", $dataToPush);\n}\n\n// let's define some fake users\nfunction fakeUserGenerator($id, $email, $acquisitionSource) {\n  $toReturn = new stdClass();\n\n  $toReturn->id = $id;\n  $toReturn->email = $email;\n  $toReturn->acquisitionSource = $acquisitionSource;\n\n  return $toReturn;\n}\n\n$users = array(\n  fakeUserGenerator(1, \"joe@schmo.com\", \"PPC\"),\n  fakeUserGenerator(2, \"mike@smith.com\", \"PPC\"),\n  fakeUserGenerator(3, \"lorem@ipsum.com\", \"Referral\"),\n  fakeUserGenerator(4, \"george@vandelay.com\", \"Organic\"),\n  fakeUserGenerator(5, \"larry@google.com\", \"Organic\"),\n);\n\n// make sure the client is authenticated before we do anything\nif($client->authenticate()) {\n  // iterate through users and push data\n  foreach($users as $user) {\n    $responses = syncUser($client, $user);\n\n    // api calls always return an array of responses\n    foreach($responses as $response) {\n      if($response->code == 201)\n        print(\"Synced user with id {$user->id}\\\\n\");\n      else\n        print(\"Failed to sync user with id {$user->id}\\\\n\");\n    }\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"clojure-2\"\n    }}>{`Clojure`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-clojure\"\n      }}>{`(ns examples.acquisition-source\n  (:require [rjmetrics.core :as rjmetrics]))\n\n(defn- sync-user\n  [config user]\n  (let [result (rjmetrics/push-data config\n                                    ;; table named \"users\"\n                                    \"users\"\n                                    ;; user_id is the unique key here, since each user\n                                    ;; should only have one record in the table\n                                    (assoc user :keys [\"id\"]))]\n    (if (= (-> result first :status) 201)\n        (print \"Synced user with id\" (:id user) \"\\\\n\")\n        (print \"Failed to sync user with id\" (:id user) \"\\\\n\"))))\n\n(defn run\n  []\n  (let [config {:client-id your-client-id :api-key \"your-api-key\"}\n        ;; let's define some fake users\n        users [{:id 1, :email \"joe@schmo.com\", :acquisition_source \"PPC\"}\n                {:id 2, :email \"mike@smith.com\", :acquisition_source \"PPC\"}\n                {:id 3, :email \"lorem@ipsum.com\", :acquisition_source \"Referral\"}\n                {:id 4, :email \"george@vandelay.com\", :acquisition_source \"Organic\"}\n                {:id 5, :email \"larry@google.com\", :acquisition_source \"Organic\"}]]\n    ;; make sure the client is authenticated before we do anything\n    (when (rjmetrics/authenticated? config)\n      ;; iterate through users and push data\n      (dorun (map (partial sync-user config) users)))))\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"ruby-2\"\n    }}>{`Ruby`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`require \"rjmetrics_client\"\nclient = RJMetricsClient.new(your-api-key, \"your-client-id\")\n\n# let's define some fake users\nfake_users = [\n  {:id => 1, :email => \"joe@schmo.com\", :acquisition_source => \"PPC\"},\n  {:id => 2, :email => \"mike@smith.com\", :acquisition_source => \"PPC\"},\n  {:id => 3, :email => \"lorem@ipsum.com\", :acquisition_source => \"Referral\"},\n  {:id => 4, :email => \"george@vandelay.com\", :acquisition_source => \"Organic\"},\n  {:id => 5, :email => \"larry@google.com\", :acquisition_source => \"Organic\"}\n]\n\ndef sync_user(client, user)\n  # \\`id\\` is the unique key here, since each user should only\n  # have one record in this table\n  user[:keys] = [:id]\n  # table named \"users\"\n  return client.pushData(\"users\", user)\nend\n\n# make sure the client is authenticated before we do anything\nif client.authenticated?\n  fake_users.each do |user|\n    # iterate through users and push data\n    sync_user(client, user).each do |response|\n      if response[\"code\"]\n        puts \"Synced user with id #{user[:id]}\"\n      else\n        puts \"Failed to sync user with id #{user[:id]}\"\n      end\n    end\n  end\nend\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"python-2\"\n    }}>{`Python`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import rjmetrics.client\n\nCLIENT_ID = 0000\nAPI_KEY = 'your_api_key'\n\nclient = rjmetrics.client.Client(CLIENT_ID, API_KEY)\n\n# let's define some fake users\nfake_users = [\n  {\"id\": 1, \"email\": \"joe@schmo.com\", \"acquisition_source\": \"PPC\"},\n  {\"id\": 2, \"email\": \"mike@smith.com\", \"acquisition_source\": \"PPC\"},\n  {\"id\": 3, \"email\": \"lorem@ipsum.com\", \"acquisition_source\": \"Referral\"},\n  {\"id\": 4, \"email\": \"george@vandelay.com\", \"acquisition_source\": \"Organic\"},\n  {\"id\": 5, \"email\": \"larry@google.com\", \"acquisition_source\": \"Organic\"}\n]\n\n\ndef sync_user(client, user):\n  # \\`id\\` is the unique key here, since each user should only\n  # have one record in this table\n  user[\"keys\"] = [\"id\"]\n  # table named \"users\"\n  return client.push_data(\"users\", [user])[0]\n\n\n# make sure the client is authenticated before we do anything\nif client.authenticate():\n  for user in fake_users:\n    # iterate through users and push data\n    response = sync_user(client, user)\n    if response.ok:\n        print \"Synced user with id \", user[\"id\"]\n    else:\n        print \"Failed to sync user with id \", user[\"id\"]\n`}</code></pre>\n    <p>{`This example is included with the `}<a parentName=\"p\" {...{\n        \"href\": \"libraries.md\"\n      }}>{`client libraries`}</a>{` or can be `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/rjmetrics\"\n      }}>{`downloaded from github`}</a>{`.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"5\" languages=\"JS, PHP, Clojure, Ruby, Python\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript-3\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install\nnode users-table.js\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"php-3\"\n    }}>{`PHP`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`composer install\nphp users-table.php\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"clojure-3\"\n    }}>{`Clojure`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-clojure\"\n      }}>{`lein repl\n\n> (ns examples.users-table)\n> (require :reload 'examples.users-table)\n> (run)\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"ruby-3\"\n    }}>{`Ruby`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`bundle install\nruby users-table.rb\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"python-3\"\n    }}>{`Python`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`pip install\npython examples/users_table.py\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"create-an-orders-table\"\n    }}>{`Create an orders table`}</h3>\n    <p>{`Now, create an orders table with the following fields: `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`user_id`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`sku`}</inlineCode>{`.`}</p>\n    <p>{`Create a new function to push the order object:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"5\" languages=\"JS, PHP, Clojure, Ruby, Python\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript-4\"\n    }}>{`Javascript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function syncOrder(client, order) {\n  return client.pushData(\n    \"orders\",\n    {\n      \"keys\": [\"id\"],\n      \"id\": order.id,\n      \"user_id\": order.user_id,\n      \"value\": order.value,\n      \"sku\": order.sku\n    });\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"php-4\"\n    }}>{`PHP`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`function syncOrder($client, $order) {\n  $dataToPush = new stdClass();\n  $dataToPush->id = $order->id;\n  $dataToPush->user_id = $order->user_id;\n  $dataToPush->value = $order->value;\n  $dataToPush->sku = $order->sku;\n  $dataToPush->keys = array(\"id\");\n\n  return $client->pushData(\"orders\", $dataToPush);\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"clojure-4\"\n    }}>{`Clojure`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-clojure\"\n      }}>{`(defn- sync-order\n  [config order]\n  (let [result (rjmetrics/push-data config\n                                    \"orders\"\n                                    (assoc order :keys [\"id\"]))]\n    (if (= (-> result first :status) 201)\n        (print \"Synced order with id\" (:id order) \"\\\\n\")\n        (print \"Failed to sync order with id\" (:id order) \"\\\\n\"))))\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"ruby-4\"\n    }}>{`Ruby`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`def sync_order(client, order)\n  order[:keys] = [:id]\n  return client.pushData(\"orders\", order)\nend\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"python-4\"\n    }}>{`Python`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def sync_order(client, order):\n  order[\"keys\"] = [\"id\"]\n  return client.push_data(\"orders\", [order])[0]\n`}</code></pre>\n    <p>{`Now, plug this into the same template from the `}<inlineCode parentName=\"p\">{`users`}</inlineCode>{` table:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"5\" languages=\"JS, PHP, Clojure, Ruby, Python\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript-5\"\n    }}>{`Javascript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`var rjmetrics = require(\"rjmetrics\");\nvar client = new rjmetrics.Client(your-client-id, \"your-api-key\");\n\nfunction syncOrder(client, order) {\n  return client.pushData(\n    \"orders\",\n    {\n      \"keys\": [\"id\"],\n      \"id\": order.id,\n      \"user_id\": order.user_id,\n      \"value\": order.value,\n      \"sku\": order.sku\n    });\n}\n\nvar orders = [\n  {\"id\": 1, \"user_id\": 1, \"value\": 58.40,  \"sku\": \"milky-white-suede-shoes\"},\n  {\"id\": 2, \"user_id\": 1, \"value\": 23.99,  \"sku\": \"red-button-down-fleece\"},\n  {\"id\": 3, \"user_id\": 2, \"value\": 5.00,   \"sku\": \"bottle-o-bubbles\"},\n  {\"id\": 4, \"user_id\": 3, \"value\": 120.01, \"sku\": \"zebra-striped-game-boy\"},\n  {\"id\": 5, \"user_id\": 5, \"value\": 9.90  , \"sku\": \"kitten-mittons\"}\n];\n\nclient.authenticate().then( function(data) {\n\n  orders.forEach( function(order) {\n    syncOrder(client, order).then( function(data) {\n      console.log(\"Synced order with id \" + order.id);\n    }, function(error) {\n      console.error(\"Failed to sync order with id \" + order.id);\n    })\n  });\n\n}).fail(function(err) {\n  console.error(\"Failed to authenticate!\");\n});\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"php-5\"\n    }}>{`PHP`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`require 'vendor/autoload.php';\n$client = new RJMetrics\\\\Client($your-client-id, \"your-api-key\");\n\nfunction syncOrder($client, $order) {\n  $dataToPush = new stdClass();\n  $dataToPush->id = $order->id;\n  $dataToPush->user_id = $order->user_id;\n  $dataToPush->value = $order->value;\n  $dataToPush->sku = $order->sku;\n  $dataToPush->keys = array(\"id\");\n\n  return $client->pushData(\"orders\", $dataToPush);\n}\n\nfunction fakeOrderGenerator($id, $userId, $value, $sku) {\n  $toReturn = new stdClass();\n\n  $toReturn->id = $id;\n  $toReturn->user_id = $userId;\n  $toReturn->value = $value;\n  $toReturn->sku = $sku;\n\n  return $toReturn;\n}\n\n$orders = array(\n  fakeOrderGenerator(1, 1, 58.40, \"milky-white-suede-shoes\"),\n  fakeOrderGenerator(2, 1, 23.99, \"red-buttons-down-fleece\"),\n  fakeOrderGenerator(3, 2, 5.00, \"bottle-o-bubbles\"),\n  fakeOrderGenerator(4, 3, 120.01, \"zebra-striped-game-boy\"),\n  fakeOrderGenerator(5, 5, 9.90, \"kitten-mittons\")\n);\n\nif($client->authenticate()) {\n  foreach($orders as $order) {\n    $responses = syncOrder($client, $order);\n\n    foreach($responses as $response) {\n      if($response->code == 201)\n        print(\"Synced order with id {$order->id}\\\\n\");\n      else\n        print(\"Failed to sync order with id {$order->id}\\\\n\");\n    }\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"clojure-5\"\n    }}>{`Clojure`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-clojure\"\n      }}>{`(ns examples.orders-table\n  (:require [rjmetrics.core :as rjmetrics]))\n\n(defn- sync-order\n  [config order]\n  (let [result (rjmetrics/push-data config\n                                    \"orders\"\n                                    (assoc order :keys [\"id\"]))]\n    (if (= (-> result first :status) 201)\n        (print \"Synced order with id\" (:id order) \"\\\\n\")\n        (print \"Failed to sync orfer with id\" (:id order) \"\\\\n\"))))\n\n(defn run\n  []\n  (let [config {:client-id your-client-id :api-key \"your-api-key\"}\n        orders [{:id 1, :user_id 1 :value 58.40  :sku \"milky-white-suede-shoes\"}\n                {:id 2, :user_id 1 :value 23.99  :sku \"red-button-down-fleece\"}\n                {:id 3, :user_id 2 :value 5.00   :sku \"bottle-o-bubbles\"}\n                {:id 4, :user_id 3 :value 120.01 :sku \"zebra-striped-game-boy\"}\n                {:id 5, :user_id 5 :value 9.90   :sku \"kitten-mittons\"}]]\n    (when (rjmetrics/authenticated? config)\n      (dorun (map (partial sync-order config) users)))))\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"ruby-5\"\n    }}>{`Ruby`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`require \"rjmetrics_client\"\nclient = RJMetricsClient.new(your-client-id, \"your-api-key\")\n\nfake_orders = [\n  {:id => 1, :user_id => 1, :value => 58.40,  :sku => \"milky-white-suede-shoes\"},\n  {:id => 2, :user_id => 1, :value => 23.99,  :sku => \"red-button-down-fleece\"},\n  {:id => 3, :user_id => 2, :value => 5.00,   :sku => \"bottle-o-bubbles\"},\n  {:id => 4, :user_id => 3, :value => 120.01, :sku => \"zebra-striped-game-boy\"},\n  {:id => 5, :user_id => 5, :value => 9.90,   :sku => \"kitten-mittons\"}\n]\n\ndef sync_order(client, order)\n  order[:keys] = [:id]\n  return client.pushData(\"orders\", order)\nend\n\nif client.authenticated?\n  fake_orders.each do |order|\n    sync_order(client, order).each do |response|\n      if response[\"code\"]\n        puts \"Synced order with id #{order[:id]}\"\n      else\n        puts \"Failed to sync order with id #{order[:id]}\"\n      end\n    end\n  end\nend\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"python-5\"\n    }}>{`Python`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import rjmetrics.client\n\nCLIENT_ID = 0000\nAPI_KEY = 'your_api_key'\n\nclient = rjmetrics.client.Client(CLIENT_ID, API_KEY)\n\nfake_orders = [\n  {\"id\": 1, \"user_id\": 1, \"value\": 58.40,  \"sku\": \"milky-white-suede-shoes\"},\n  {\"id\": 2, \"user_id\": 1, \"value\": 23.99,  \"sku\": \"red-button-down-fleece\"},\n  {\"id\": 3, \"user_id\": 2, \"value\": 5.00,   \"sku\": \"bottle-o-bubbles\"},\n  {\"id\": 4, \"user_id\": 3, \"value\": 120.01, \"sku\": \"zebra-striped-game-boy\"},\n  {\"id\": 5, \"user_id\": 5, \"value\": 9.90,   \"sku\": \"kitten-mittons\"}\n]\n\n\ndef sync_order(client, order):\n  order[\"keys\"] = [\"id\"]\n  return client.push_data(\"orders\", [order])[0]\n\n\n# make sure the client is authenticated before we do anything\nif client.authenticate():\n  for order in fake_orders:\n    # iterate through users and push data\n    response = sync_order(client, order)\n    if response.ok:\n        print \"Synced order with id \", order[\"id\"]\n    else:\n        print \"Failed to sync order with id \", order[\"id\"]\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","InlineAlert","CodeBlock","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","repeat","languages","isMDXComponent"],"sourceRoot":""}